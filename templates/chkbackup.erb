#!/bin/bash
#
# Check burp backup status of a single client from server by Hugo van Duijn
#
# Designed for usage with sensu
#
# Makes use of the burp -a S command for detecting last successful or running backup
# Creates errorlevel 2 for critical conditions, 1 for warning conditions and 0 if 
# backup is younger than warninghours
#

difference=0
backupseconds=0
warninghours=<%= @chkwarninghours %>
criticalhours=<%= @chkcriticalhours %>
currenttime=$(date +%s)
lastbackup=`burp -a S -c /etc/burp/burp.conf -C <%= @chkbackupclient %> | grep 'Backup list' | awk '{print $4" "$5}'`
lastbackupnever=`burp -a S -c /etc/burp/burp.conf -C <%= @chkbackupclient %> | grep 'Backup list' | awk '{print $3}'`
backupstatus=`burp -a S -c /etc/burp/burp.conf -C <%= @chkbackupclient %> | grep 'Status' | awk '{print $3}'`
backuprunning=`burp -a S -c /etc/burp/burp.conf -C <%= @chkbackupclient %> | grep 'Start time' | awk '{print $3" "$4}'`
status='older'

if [[ -n $backupstatus ]]
then
  if [ $backupstatus == "(restoring)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(shuffling)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(scanning)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(deleting)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(running)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(backup)" ]
  then
    backupstatus="active"
  fi

  if [ $backupstatus == "(merging)" ]
  then
    backupstatus="active"
  fi

else
  backupstatus="unknown"
fi


if [[ -n $backuprunning ]]
then
  status='running longer'
  backupstatus='backup started'
  lastbackup=$backuprunning
else
  if [ $backupstatus == "active" ]
  then
    echo "Check ok: Backup is active, no trace of time possible."
    exit 0
  fi
fi

backupstatus='lastbackup'

# check for backup entry for "never" in burp test
if [ "$lastbackupnever" = "never" ]
then
  echo "Lastbackup: never"
  exit 2
fi

# check for backup entry using burp test
if [[ -z $lastbackup ]]
then
  echo "No successful backup found using the burp -a S command"
  exit 2
fi

lastbackup="${lastbackup:0: -1}"
backupseconds=$(date +%s -d "$lastbackup")
difference=$(expr $currenttime - $backupseconds )

# check if backup is older than criticalhours
if [ `expr $difference / 3600` -gt $criticalhours ]
then 
  echo "Critical, backup is $status than $criticalhours hours, $backupstatus : `expr $difference / 3600` hours ago."
  exit 2
fi

# check if backup is older than warninghours
if [ `expr $difference / 3600` -gt $warninghours ]
then 
  echo "Warning, backup is $status than $warninghours hours, $backupstatus : `expr $difference / 3600` hours ago."
  exit 1
else
  echo "Check ok: Backup is not $status than $warninghours hours, $backupstatus : `expr $difference / 3600` hours ago."
  exit 0
fi

